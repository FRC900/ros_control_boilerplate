# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 100
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       - {name: joint_1, hw_id: 1}
       - {name: joint_2, hw_id: 2}
       - {name: joint_3, hw_id: 3}
       - {name: joint_4, hw_id: 4}

   # Add more data for each joint here - intitial mode, encoder type
   #    PIDF settings, limit switch settings, etc

   # Not used for now, maybe not used at all if sim
   # is aware of Talon mode switching
   sim_control_mode: 1 # 0: position, 1: velocity

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/joint_states
#
# This one creates the /joint_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 50

# Create a controller called joint1_velocity_controller
#  That name is used by spawner in the launch file to 
#  actually start this controller
# The joint it controls is joint_1. This should match
# up with one of the names in the top-level joints list
# above.  
# The type is a talon_controllers/TalonController
joint1_talon_controller:
    type: talon_controllers/TalonPercentVbusController
    joint: joint_1

# Do the same for a second joint. The name is different
# but the type is the same as the previous controller
joint2_talon_controller:
    type: talon_controllers/TalonPositionCloseLoopController
    joint: joint_2
    close_loop_values:
        - {p: 100.0, i: 1, d: 10.0, f: 0.5, i_zone: 2.0}
        - {p: 1000.0, i: 15.0, d: 5.0, f: 1.5, i_zone: 3.0}

joint3_talon_controller:
    type: talon_controllers/TalonPercentVbusController
    joint: joint_3

joint4_talon_controller:
    type: talon_controllers/TalonPercentVbusController
    joint: joint_4
